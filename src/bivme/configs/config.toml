
title = "Configuration file for biv-me"
version = "1.0.0" # for semantic versioning - Major.Minor.Patch sequence
# e.g software version 2.3.1 means that the software is in its second major version,
# with three additional functionalities added, and one patch fix implemented.
# When a developer fixes a bug in that version, the next version release is named version 2.3.2.

[modules]
preprocessing = true
fitting = true
# Define which modules you want to run. 
# preprocessing generates GPFiles and SliceInfo files for biv model fitting directly from a DICOM directory
# fitting carries out biv model fitting on a set of GPFiles and SliceInfo files
# If both are enabled, they will be run in sequence, such that biv models will be generated for each case within a DICOM directory
# If only fitting is enabled, biv models will be created from existing GPFiles
# If only preprocessing is enabled, GPFiles and SliceInfo files will be created for each case within a DICOM directory 
# Allowed values:
# * true    : Run this module
# * false    : Do not run this module
# Default: true

[logging]
show_detailed_logging = true
# Change the log visibility for preprocessing and fitting. Useful for debugging and oversight.
# If true, detailed logs will show on the console.
# Default: true

generate_log_file = true
# Decide whether or not to save the log files. If true, a .log file will be generated each for preprocessing and fitting
# Default: true

## Preprocessing parameters
# Below are the parameters used to configure preprocessing of DICOM files 
# Skip these if you do not intend to run preprocessing
[input_pp]
source = ''
# Define the directory containing raw dicoms. Files must be grouped into one folder per case
# Default: ''

batch_ID = "test"
# Define the id of the batch you are processing. This will define the name of the folder that processed outputs will be written to
# Default: "test"

analyst_id = "analyst1"
# Define the id of the analyst performing the preprocessing. Useful e.g. if view predictions need to be corrected
# Default: "analyst1"

processing = ''
# Define the directory where processing files (including view predictions, segmentations) will be written
# Default: ''

states = ''
# Define the directory where view predictions and log files will be written out to
# Default: ''

[view-selection]
option = "default"
# Define how you would like to perform view selection
# * "default" : View predictions are generated by using metadata and image data
# * "metadata-only": View predictions are generated using metadata only
# * "image-only": View predictions are generated using image data only
# * "load" : View predictions are loaded from the states folder, if they exist
# Default: "default"

[segmentation]
version = "3d"
# Define the version of nnU-Net models to segment with. 3D models are recommended, for increased speed and temporal coherency, but you have the option 
# Allowed values:
# * "2d" : Use 2D segmentation models. Runs frame by frame.
# * "3d" : Use 3D segmentation models. Runs on 2D+t sequence.
# Default: "3d"

[output_pp]
overwrite = true
# Define to overwrite the processed folder and outputs of an already preprocessed case, if it exists
# Default: true

generate_plots = true
# Define whether to generate html plots of exported contours after preprocessing. 
# Default: true

output_directory = ''
# Define the directory where GPFiles will be created
# If fitting and preprocessing are both enabled, this output_directory will also be the gp_directory used for fitting (see below)
# Default: ''

## Fitting parameters
# Below are the parameters used to configure biv model fitting 
[input_fitting]
gp_directory = "./../../../example/guidepoints"
# Define the directory containing guidepoint files
# If fitting and preprocessing are both enabled, this gp_directory will also be the output_directory used in preprocessing (see above)
# default: "./../../../example/guidepoints"

gp_suffix = ''
# Define guidepoints to use if we do not want to fit all the models in the input folder
# Default: ""

si_suffix = ''
# Define slice info to use if multiple SliceInfo.txt file are available
# Default: ""

[breathhold_correction]
shifting = "derived_from_ed" # derived_from_ed, average_all_frames, none
# Define the method used for breathhold misregistration correction.
# Allowed values:
# * "derived_from_ed"      : The correction is calculated at ED only and propagated to all the frames
# * "average_all_frames"  : Breathold misregistration is calculated by averaging slice shift over all frame
# * "none"  : no correction applied
# Default: "derived_from_ed"

ed_frame = 0  # ED frame

[gp_processing]
sampling = 1
# Controls whether to sample the data points or not. This can be useful when dealing with very dense data points.
# sampling = 1 means all the points are kept, sampling = 2 means that 1 every two points is kept etc.
# Default: 1

num_of_phantom_points_mv = 30
# Controls the number of points to be generated on the mitral valve annulus
# Default: 30. Use 0 if you do not want any to be generated

num_of_phantom_points_tv = 30
# Controls the number of points to be generated on the tricuspid valve annulus
# Default: 30. Use 0 if you do not want any to be generated

num_of_phantom_points_pv = 20
# Controls the number of points to be generated on the pulmonary valve annulus
# Default: 20. Use 0 if you do not want any to be generated

num_of_phantom_points_av = 20
# Controls the number of points to be generated on the aortic valve annulus
# Default: 20. Use 0 if you do not want any to be generated

[fitting_weights]
guide_points = 100.0
convex_problem = 1e6
transmural = 0.01

[output_fitting]
export_control_mesh = false
# Decide whether or not to save the coarse mesh. If true, the coarse mesh will be generated (format: mesh_format)
# Default: false

mesh_format = ".vtk"
# Allowed values:
# * ".obj" : write the mesh as a wavefront .obj file - compatible with most computer graphics/mesh visualisation software
# * ".vtk" : write the mesh as to vk format
# * "none" : Only the .txt files containing the fitted model control meshes are written.
# Default: ".vtk"

closed_mesh = false
# Option to export mesh object as closed or not closed
# Default: "false"

output_meshes = ["LV_ENDOCARDIAL", "RV_ENDOCARDIAL", "EPICARDIAL"]
# Allowed values:
# * "LV_ENDOCARDIAL" : LV endocardium
# * "RV_ENDOCARDIAL" : RV endocardium - RVFW and RVS
# * "EPICARDIAL" : Epicardium

overwrite = true
# Define to overwrite the output mesh if it exists

output_directory = "./../../output/"
# Define where to save the fitted models and files
# default: "./../../output/"

[multiprocessing]
workers = 1
# number of workers to use for multi processing
# default: 1