from BiVFitting import GPDataSet
import unittest
from BiVFitting import BiventricularModel
import numpy as np
import os

class GPDataSetTests(unittest.TestCase):
#todo: test cases for the main functions
    def test_sax_shift(self):
        self.assertEqual(1,1)

    def test_lax_shift(self):
        self.assertEqual(1,1)

class BioventricularModel(unittest.TestCase):
    # todo: test cases for the main functions
    def test_read_data(self):
        self.assertEqual(1,1)

    def test_evaluate_surface_field(self):
        case = 'test_data'
        # Loads biventricular control_mesh
        model_path = "/home/am20/dev/BiVFitting/model"
        test_data_path = '/home/am20/dev/BiVFitting/test_data'
        biventricular_model = BiventricularModel(model_path, case,
                                                 build_mode=True)

        field_file = np.load(os.path.join(test_data_path, 'coarse_matrics_cs.npy'),
                             allow_pickle=True)[()]
        node_map = list(field_file.keys())
        field = np.array([field_file[x][0,0] for x in field_file.keys()])
        inter_field = biventricular_model.evaluate_surface_field(field,node_map)

        error = np.linalg.norm((field - inter_field[node_map]))

        self.assertAlmostEqual(error,0)

    def test_evaluate_gauss_point(self):
        case = 'test_data'
        # Loads biventricular control_mesh
        model_path = "/home/am20/dev/BiVFitting/model"
        biventricular_model = BiventricularModel(model_path, case,
                                                 build_mode=True)
        a, b, c = biventricular_model.evaluate_basis_matrix(0., 0.25, 0.25, 1)

        c_test = np.array([1014,  544, 1092,  542,  782, 1096,  630,  865, 1014,  544,  862,
        484,  782, 1096,  631,  863, 3389, 2849, 3120, 2852, 2601, 3394,
       2728, 3393, 3384, 2854, 3122, 2855, 2723, 3121, 2647, 3123])
        self.assertTrue(np.allclose(c,c_test))

        a_test = np.array(
            [0.07324222, 0.00732422, 0.0322266, 0.322266, 0.03662108,
             0.161133, 0.00732422, 0.07324222, 0.03662108, 0.14979677,
             0.00062693, 0.01721195, 0.07707158, 0.00631147, -0.00159596,
             0.00073242, 0.00340897, -0.00319794, -0.00036621])

        self.assertTrue(np.allclose(a[np.logical_not(a ==0)],a_test))

        b_test = np.array([[-1.75781400e-01, -6.59181000e-02, 1.58203200e-01,
                            0.00000000e+00, 0.00000000e+00, -9.76563000e-02,
                            8.78908000e-02, 2.34375200e-01, 0.00000000e+00,
                            -2.10937600e-01],
                           [-1.75781400e-02, -2.19726600e-02, 5.27343960e-02,
                            0.00000000e+00, 0.00000000e+00, -9.76563000e-03,
                            2.92968800e-02, 2.34375200e-02, 0.00000000e+00,
                            -7.03125280e-02],
                           [0.00000000e+00, 7.32423000e-03, -1.75781640e-02,
                            0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
                            -9.76564000e-03, 0.00000000e+00, 0.00000000e+00,
                            2.34375520e-02],
                           [-1.17189000e-02, -9.66798000e-02, 3.51567600e-02,
                            0.00000000e+00, 0.00000000e+00, -4.29688000e-02,
                            1.28906400e-01, 1.56252000e-02, 0.00000000e+00,
                            -4.68756800e-02],
                           [0.00000000e+00, 3.22266000e-02, -1.17188400e-02,
                            0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
                            -4.29688000e-02, 0.00000000e+00, 0.00000000e+00,
                            1.56251200e-02],
                           [-1.17189000e-01, -2.90040000e-01, 1.05468000e-01,
                            0.00000000e+00, 0.00000000e+00, -4.29688000e-01,
                            3.86720000e-01, 1.56252000e-01, 0.00000000e+00,
                            -1.40624000e-01],
                           [-8.78904000e-02, 8.05665000e-02, -1.93360800e-01,
                            0.00000000e+00, 0.00000000e+00, -4.88281000e-02,
                            -1.07422000e-01, 1.17187200e-01, 0.00000000e+00,
                            2.57814400e-01],
                           [-5.85930000e-02, 3.54492000e-01, -1.28916000e-01,
                            0.00000000e+00, 0.00000000e+00, -2.14844000e-01,
                            -4.72656000e-01, 7.81240000e-02, 0.00000000e+00,
                            1.71888000e-01],
                           [2.92970100e-02, -2.19726600e-02, -8.78912400e-02,
                            0.00000000e+00, 0.00000000e+00, -9.76563000e-03,
                            2.92968800e-02, -3.90626800e-02, 0.00000000e+00,
                            1.17188320e-01],
                           [0.00000000e+00, 7.32423000e-03, 2.92968000e-02,
                            0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
                            -9.76564000e-03, 0.00000000e+00, 0.00000000e+00,
                            -3.90624000e-02],
                           [2.92970100e-01, -6.59181000e-02, -2.63679600e-01,
                            0.00000000e+00, 0.00000000e+00, -9.76563000e-02,
                            8.78908000e-02, -3.90626800e-01, 0.00000000e+00,
                            3.51572800e-01],
                           [1.46484600e-01, 8.05665000e-02, 3.22262400e-01,
                            0.00000000e+00, 0.00000000e+00, -4.88281000e-02,
                            -1.07422000e-01, -1.95312800e-01, 0.00000000e+00,
                            -4.29683200e-01],
                           [-1.33806917e-01, -9.95735833e-02, 8.96270000e-02,
                            -7.67500000e-02, -3.07002000e-01, 5.99187083e-01,
                            -3.98294333e-01, -5.35227667e-01, 0.00000000e+00,
                            3.58508000e-01],
                           [-5.06370000e-04, 7.52319333e-03, -6.07644000e-03,
                            -5.78733333e-04, 6.01855467e-02, 2.50773111e-03,
                            3.00927733e-02, -2.02548000e-03, 0.00000000e+00,
                            -2.43057600e-02],
                           [-1.53808908e-02, -6.88480725e-02, 6.15239100e-02,
                            -8.78935333e-03, 1.83598087e-01, 6.88478036e-02,
                            -2.75392290e-01, -6.15235633e-02, 0.00000000e+00,
                            2.46095640e-01],
                           [-6.85493083e-02, 1.59884392e-01, -1.38997100e-01,
                            -4.09063333e-02, 5.51252667e-02, 3.08286336e-01,
                            6.39537567e-01, -2.74197233e-01, 0.00000000e+00,
                            -5.55988400e-01],
                           [1.15125917e-01, -4.99091667e-03, -7.16150000e-02,
                            1.51476667e-01, -1.90953333e-02, 2.52458611e-02,
                            -1.99636667e-02, 4.60503667e-01, 0.00000000e+00,
                            -2.86460000e-01],
                           [1.02267983e-02, -2.87544833e-03, 2.50651200e-02,
                            -3.83030533e-02, 3.03810667e-03, -6.38383556e-03,
                            -1.15017933e-02, 4.09071933e-02, 0.00000000e+00,
                            1.00260480e-01],
                           [1.31835983e-02, -2.92968000e-03, -5.27344200e-02,
                            1.75782400e-02, 7.81256000e-03, 2.92967333e-03,
                            -1.17187200e-02, 5.27343933e-02, 0.00000000e+00,
                            -2.10937680e-01],
                           [5.83226500e-02, 8.35530000e-03, 1.13932200e-01,
                            8.18104000e-02, 1.47576000e-02, 1.36359000e-02,
                            3.34212000e-02, 2.33290600e-01, 0.00000000e+00,
                            4.55728800e-01],
                           [1.91876500e-02, 1.98930000e-03, -1.19358000e-02,
                            -7.67505733e-02, 5.49762667e-03, -1.27917689e-02,
                            7.95720000e-03, 7.67506000e-02, 0.00000000e+00,
                            -4.77432000e-02],
                           [2.19726608e-03, 1.46484525e-03, -8.78906700e-03,
                            -8.78905800e-03, -3.90626200e-03, -1.46484458e-03,
                            5.85938100e-03, 8.78906433e-03, 0.00000000e+00,
                            -3.51562680e-02]])
        self.assertTrue(np.allclose(b[np.sum(b != 0, axis = 1)>0,:],b_test))


if __name__ == '__main__':
    unittest.main()